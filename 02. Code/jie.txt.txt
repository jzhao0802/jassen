outcome <- 'ga_outcome'
Model_Evaluate_elastic_v2 <- function(cohort, outcome){
    
    data_file<- paste('ModelData_', cohort, '_by_', outcome, '_v2.csv', sep='')
    raw_data <- read.table(paste(data_path, data_file, sep='\\'), sep=',', head=T)
    names(raw_data)<- tolower(names(raw_data))
    
    dim(raw_data)
    na_check1 <- apply(apply(raw_data, 2, is.na), 2, sum)
    raw_data_noMiss <- na.omit(raw_data)
    na_check <- apply(apply(raw_data_noMiss, 2, is.na), 2, sum)
    n.pt <- dim(raw_data)[1]
    n.pt.outcome1 <- length(raw_data$response[raw_data$response==1]) 
    n.pt.noMiss <- dim(raw_data_noMiss)[1]
    n.pt.outcome1.noMiss <- length(raw_data_noMiss$response[raw_data_noMiss$response==1])
    training_data_lasso<-raw_data_noMiss
    training_matrix<- model.matrix(response~., data=training_data_lasso)[,-1]     # removes intercept term
    
    
    #run elastic
    alpha_seq <- seq(0, 1, 0.01)
    model_results <- numeric()
    alpha <- alpha_seq[1]
    alpha <- 0.02
    for(alpha in alpha_seq){
        # Calculating initial lambda and the lambda sequence
        initial_lambda<-glmnet(x=training_matrix, y=training_data_lasso$response, family="binomial", alpha=alpha, standardize=F)$lambda  # calculating the initial lambda 
        length(initial_lambda) #100  decreasing 
        lambda_seq<- c(initial_lambda[-length(initial_lambda)] , seq(initial_lambda[length(initial_lambda)] , 0 , length=500)) # get a length=500 descending sequence from initial lambda to 0
        length(lambda_seq) #599 (0is the last one)
        #cv_auc <- matrix(nr=dim(training_data_lasso)[1] , nc=length(lambda_seq))
        #dim(cv_auc)  #[1]   n.fold 599
        
        #run LOOCV
        test_pred_list <- matrix(nr=nrow(training_data_lasso), nc=length(lambda_seq))
        i <- 83
        for(i in 1:nrow(training_data_lasso)){
            cv_training_data_lasso<- training_data_lasso[-i,]                                            # select data except ith row as training data
            cv_training_matrix<- model.matrix(response~., data=cv_training_data_lasso)[,-1]
            cv_test_data_lasso<- training_data_lasso[i,]                                                # select the ith row as test data
            cv_test_matrix<- model.matrix(response~., data=cv_test_data_lasso)[,-1] #
            cv_test_matrix <- t(cv_test_matrix) #transpose vector as matrix whose dim is [1, 26]
            
            fit_lasso<- glmnet(cv_training_matrix, cv_training_data_lasso$response, 
                               lambda=lambda_seq, family="binomial", alpha=alpha, standardize=F)
            test_pred<- predict(fit_lasso, cv_test_matrix, type="response")
            dim(test_pred) 
            test_pred_list[i, ] <- test_pred
            #test_pred_avg<- apply(test_pred, 2, function(x){auc(cv_test_data_lasso$response , x)})
            #test_pred_avg<- c(test_pred_avg , rep(NA , length(lambda_seq) - length(test_pred_avg))) # some small lambda may not be reached
            #cv_auc[i,] <- test_pred_avg
        }
        
        #cv_auc_mean <- apply(cv_auc, 2, function(x){mean(x[!is.na(x)])})
        auc_summary <- apply(test_pred_list, 2, function(x){auc(training_data_lasso$response, x)})
        optimum_model <- which.max(auc_summary)
        total_model <- glmnet(training_matrix, training_data_lasso$response, 
                              lambda=lambda_seq, family="binomial", alpha=alpha, standardize=F) #using the full training data
        
        optimum_lambda <- lambda_seq[optimum_model]
        #get AUC of training and test
        training_obs <- predict(total_model, training_matrix, type='response')[, optimum_model]
        training_auc <- as.vector(auc(training_data_lasso$response, training_obs))
        test_auc <- max(auc_summary)
        auc_diff <- training_auc-test_auc
        #get coef, odds ratio, p_value
        model_coef <- total_model$beta[, optimum_model]
        model_coef_keep <- model_coef[model_coef!=0]
        if(length(model_coef_keep)==0){
            temp <- data.frame(alpha, coef_nm=NA, model_coef_keep=NA, odds_ratio=NA, p_value=NA, training_auc, test_auc=test_auc, auc_diff)
            
        }else{
            odds_ratio <- exp(model_coef_keep)
            coef_nm <- names(model_coef_keep)
            #get p_value
            model_var <- c('response', coef_nm)
            re_fit <- glm(response~., data=training_data_lasso[, match(model_var, names(training_data_lasso))], family=binomial)
            p_value <- summary(re_fit)$coef[, 'Pr(>|z|)'][-1]
            p_value <- p_value[match(coef_nm, names(p_value))]
            #store coef, odds ratio, p_value
            temp <- data.frame(alpha, coef_nm, model_coef_keep, odds_ratio, p_value, training_auc, test_auc, auc_diff)
            
        }
        model_results <- rbind(model_results, temp)
        
    }#end of alpha
    model_select1 <- model_results[model_results$test_auc==max(model_results$test_auc),]
    alpha_levels <- length(levels(model_select$alpha))
    model_select2 <- model_select[model_select$auc_diff==min(model_select$auc_diff), ]
    if(length(levels(model_select2$alpha))>1){
        alpha_target <- levels(model_select2$alpha)[1]
        model_select <- model_select2[model_select2$alpha==alpha_target, ] 
    }else{
        model_select <- model_select2
    }

    model_select$Definition <- covar_definition[match(coef_nm, covar_definition[, 2]), 4]
    return(model_select)
}
output1 <- Model_Evaluate_elastic_v2('mild_uni', 'ga_outcome')
#output2 <- Model_Evaluate_elastic_v2('mild_uni', 'adv_outcome')
output3 <- Model_Evaluate_elastic_v2('mild_bil', 'ga_outcome')
#output4 <- Model_Evaluate_elastic_v2('mild_bil', 'adv_outcome')
output5 <- Model_Evaluate_elastic_v2('ga_all', 'wet_outcome')
output_elastic_loocv <- rbind(output1, output3, output5)

write.xlsx(output, file=paste('LOOCV_AUC_135_v1.xlsx', sep=''), sheetName='elastic', row.names=F, append=T, showNA=T)



